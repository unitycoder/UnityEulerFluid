#pragma kernel ApplyBoundary
#pragma kernel AdvectVelocity
#pragma kernel AdvectPressure
#pragma kernel Diffuse
#pragma kernel AddForce
#pragma kernel ComputeDivergence
#pragma kernel ComputePressure
#pragma kernel SubPressureGradient
#pragma kernel ClearPressure

#define THREAD [numthreads(8,8,8)]

StructuredBuffer<float3>   _VelocityRead;
RWStructuredBuffer<float3> _VelocityWrite;

StructuredBuffer<float>   _PressureRead;
RWStructuredBuffer<float> _PressureWrite;

StructuredBuffer<float> _VelocityDivergenceRead;
RWStructuredBuffer<float> _VelocityDivergenceWrite;

RWTexture2D<float4> _VelocityTexture;

float _VelocityDissipation;
float _PressureDissipation;
float _Viscosity;

float _TimeStep;
float _Decay;
float3 _FieldSize;

float2 _MousePos;
float2 _MouseVel;

 static const int3 l = int3(-1,0, 0);
 static const int3 r = int3(1, 0, 0);
 static const int3 u = int3(0, 1, 0);
 static const int3 d = int3(0,-1, 0);
 static const int3 f = int3(0, 0, 1);
 static const int3 b = int3(0, 0,-1);


int UVToIndex(int3 uv, int3 size)
{
    uv = clamp(uv, 0, size-1);
    return uv.x + uv.y * size.x + uv.z * size.x * size.y;
}

int3 GetBackwardUV(int3 uv, float dt)
{
    return uv - dt * _VelocityRead[UVToIndex(uv, _FieldSize)] * _FieldSize;
}

THREAD
void ClearPressure (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id;
    _PressureWrite[UVToIndex(uv, _FieldSize)] = 0;
}

THREAD
void ApplyBoundary (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id;
    float3 vel = _VelocityRead[UVToIndex(uv, _FieldSize)];
    if(uv.x == 0 || uv.y == 0 || uv.z == 0 || uv.x == _FieldSize.x-1 || uv.y == _FieldSize.y-1 || uv.z == _FieldSize.z-1) vel = 0;
    _VelocityWrite[UVToIndex(uv, _FieldSize)] = vel;
}

THREAD
void AdvectVelocity (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id;
    int3 backUV = GetBackwardUV(uv, _TimeStep);
    _VelocityWrite[UVToIndex(uv, _FieldSize)] = _VelocityRead[UVToIndex(backUV, _FieldSize)] * _VelocityDissipation;
}

THREAD
void AdvectPressure (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id;
    int3 backUV = GetBackwardUV(uv, _TimeStep);
    _PressureWrite[UVToIndex(uv, _FieldSize)] = max(0, _PressureRead[UVToIndex(backUV, _FieldSize)] * _PressureDissipation);
}

THREAD
void Diffuse (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id;
    float3 vel = _VelocityRead[UVToIndex(uv, _FieldSize)];
    float3 v = 0;
    v += _VelocityRead[UVToIndex(uv + u, _FieldSize)] + _VelocityRead[UVToIndex(uv + d, _FieldSize)];
    v += _VelocityRead[UVToIndex(uv + r, _FieldSize)] + _VelocityRead[UVToIndex(uv + l, _FieldSize)];
    v += _VelocityRead[UVToIndex(uv + f, _FieldSize)] + _VelocityRead[UVToIndex(uv + b, _FieldSize)];

    float alpha = 1.0f/(_Viscosity * _TimeStep + 0.00001);
    float beta = 6.0f + alpha;
    v = (v + alpha * vel)/beta;

    _VelocityWrite[UVToIndex(uv, _FieldSize)] = v;
}

THREAD
void AddForce (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id;
    int2 pos = _MousePos * _FieldSize.xy;
    float3 current = _VelocityRead[UVToIndex(uv, _FieldSize)];
    float r = 128;

    if(distance(uv.xy, pos) < r)
    {
        //  current += float3(_MouseVel,0);
        const float PI = 3.141592653;
        float vel = saturate(distance(uv.xy, pos)/r);
        float angle = lerp(-PI/6, -PI/16, vel);
        float2x2 mat = float2x2(cos(angle), -sin(angle), sin(angle), cos(angle));
        float2 force = pos - uv.xy;
        current += float3(mul(mat, force),0) * 0.005 *(1-vel);
    }

    _VelocityWrite[UVToIndex(uv, _FieldSize)] = current;
}

THREAD
void ComputeDivergence (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id.xyz;
    float div = 0;
    div += _VelocityRead[UVToIndex(uv + r, _FieldSize)].x - _VelocityRead[UVToIndex(uv + l, _FieldSize)].x;
    div += _VelocityRead[UVToIndex(uv + u, _FieldSize)].y - _VelocityRead[UVToIndex(uv + d, _FieldSize)].y;
    div += _VelocityRead[UVToIndex(uv + f, _FieldSize)].z - _VelocityRead[UVToIndex(uv + b, _FieldSize)].z;
    div *= 0.5f;
    
    _VelocityDivergenceWrite[UVToIndex(uv, _FieldSize)] = div;
}

THREAD
void ComputePressure (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id.xyz;
    float div = _VelocityDivergenceRead[UVToIndex(uv, _FieldSize)];
    float p = 0;
    
    p += _PressureRead[UVToIndex(uv + u, _FieldSize)] + _PressureRead[UVToIndex(uv + d, _FieldSize)];
    p += _PressureRead[UVToIndex(uv + r, _FieldSize)] + _PressureRead[UVToIndex(uv + l, _FieldSize)];
    p += _PressureRead[UVToIndex(uv + f, _FieldSize)] + _PressureRead[UVToIndex(uv + b, _FieldSize)];

    float alpha = -1;
    float beta = 6;
    p = (p + alpha * div)/beta;

    _PressureWrite[UVToIndex(uv, _FieldSize)] = max(0, p);
}

THREAD
void SubPressureGradient (uint3 id : SV_DispatchThreadID)
{
    int3 uv = id.xyz;
    float3 vel = _VelocityRead[UVToIndex(uv, _FieldSize)];
    float3 gradient = 0;
    
    gradient.x = _PressureRead[UVToIndex(uv + r, _FieldSize)] - _PressureRead[UVToIndex(uv + l, _FieldSize)];
    gradient.y = _PressureRead[UVToIndex(uv + u, _FieldSize)] - _PressureRead[UVToIndex(uv + d, _FieldSize)];
    gradient.z = _PressureRead[UVToIndex(uv + f, _FieldSize)] - _PressureRead[UVToIndex(uv + b, _FieldSize)];
    gradient *= 0.5f;
    
    vel = vel - gradient;

    _VelocityWrite[UVToIndex(uv, _FieldSize)] = vel;

    float p = _PressureRead[UVToIndex(uv, _FieldSize)];
    float speed = length(vel);
    float3 nVel = speed > 0? vel/100:0;
    _VelocityTexture[uv.xy] = float4((vel + 1)*0.5f,1);
    // _VelocityTexture[uv.xy] = float4(vel,1);
    // _VelocityTexture[uv.xy] = float4(p,0,0,1);
}